#include "tcp_connection.hh"

#include <iostream>
#include <utility>
#include <functional>

// Dummy implementation of a TCP connection

// For Lab 4, please replace with a real implementation that passes the
// automated checks run by `make check`.

template<typename... Targs>
void DUMMY_CODE(Targs &&... /* unused */) {}

using namespace std;

// mimic defer keyword in golang
class defer {
 public:
  explicit defer(std::function<void()> f) : _f(std::move(f)) {}
  ~defer() { if (_active) _f(); };
  void cancel() { _active = false; }
 private:
  std::function<void()> _f;
  bool _active{true};
};

size_t TCPConnection::remaining_outbound_capacity() const {
  return _sender.stream_in().remaining_capacity();
}

size_t TCPConnection::bytes_in_flight() const {
  return _sender.bytes_in_flight();
}

size_t TCPConnection::unassembled_bytes() const {
  return _receiver.unassembled_bytes();
}

size_t TCPConnection::time_since_last_segment_received() const {
  return _time_recv_pack;
}

// +-------------+----------------+------------------+
// |  TCP state  |  sender state  |  receiver state  |
// +-------------+----------------+------------------+
// |  CLOSED     |  CLOSED        |  /               |
// |  LISTEN     |  CLOSED        |  LISTEN          |
// |  SYN_SENT   |  SYN_SENT      |  LISTEN          |
// |  SYN_RECV   |  SYN_SENT      |  SYN_RECV        |
// |  ESTABLISHED|  SYN_ACKED     |  SYN_RECV        |
// |  CLOSE_WAIT |  SYN_ACKED     |  FIN_RECV        |
// |  LAST_ACK   |  FIN_SENT      |  FIN_RECV        |
// |  FIN_WAIT_1 |  FIN_SENT      |  SYN_RECV        |
// |  FIN_WAIT_2 |  FIN_ACKED     |  SYN_RECV        |
// |  CLOSING    |  FIN_SENT      |  FIN_RECV(linger)|
// |  TIME_WAIT  |  FIN_ACKED     |  FIN_RECV(linger)|
// |  CLOSED     |  FIN_ACKED     |  FIN_RECV        |
// +-------------+----------------+------------------+

void TCPConnection::segment_received(const TCPSegment &seg) {
  // clog << rand_id << ": ack: " << seg.header().ackno.raw_value() << endl;
  _time_recv_pack = 0;
  if (!_active)
    return;

  // flush sender queue when leaving this function
  defer d([this] { flushSender(); });

  // RST received
  if (seg.header().rst) {
    _sender.stream_in().set_error();
    _receiver.stream_out().set_error();
    _active = false;
    return;
  }

  // for keep-alive
  if (_receiver.ackno().has_value() && (seg.length_in_sequence_space() == 0)
      && seg.header().seqno == _receiver.ackno().value() - 1) {
    _sender.send_empty_segment();
    return;
  }
  if (_sender.closed() && _receiver.listen()) { // LISTEN
    if (!seg.header().syn) {   // no SYN
      d.cancel();
      return;
    }
    ackSeg(seg);
    _receiver.segment_received(seg);
    _sender.fill_window();
    // if (seg.header().syn)
    //   clog << rand_id << ": LISTEN ---> SYN_RECEIVED" << endl;
    return;
  } else if (_sender.syn_sent() && _receiver.listen()) {  // SYN_SENT
    ackSeg(seg);
    _receiver.segment_received(seg);
    _sender.fill_window();
    // if (seg.header().syn) {
    //   if (seg.header().ack) {
    //     clog << rand_id << ": SYN_SENT ---> ESTABLISHED" << endl;
    //   } else {
    //     clog << rand_id << ": SYN_SENT ---> SYN_RECEIVED" << endl;
    //   }
    // }
  } else if (_sender.syn_sent() && _receiver.syn_recv()) {  // SYN_RECV
    ackSeg(seg);
    _receiver.segment_received(seg);
    _sender.fill_window();
    // if (_sender.syn_acked() && _receiver.syn_recv())
    //   clog << rand_id << ": SYN_RECEIVED ---> ESTABLISHED" << endl;
  } else if (_sender.syn_acked() && _receiver.syn_recv()) { // ESTABLISHED
    ackSeg(seg);
    _receiver.segment_received(seg);
    _sender.fill_window();
    if (seg.header().fin) {
      // clog << rand_id << ": ESTABLISHED ---> CLOSE_WAIT" << endl;
      _linger_after_streams_finish = false;
    }
  } else if (_sender.syn_acked() && _receiver.fin_recv()) { // CLOSE_WAIT
    // clog << "in CLOSE_WAIT with ack: " << seg.header().ackno.raw_value() << endl;
    ackSeg(seg);
    _receiver.segment_received(seg);
    _sender.fill_window();  // continue transferring data
  } else if (_sender.fin_sent() && _receiver.fin_recv() && !_linger_after_streams_finish) {  // LAST_ACK
    // clog << rand_id << ": CLOSE_WAIT ---> LAST_ACK" << endl;
    ackSeg(seg);
    _receiver.segment_received(seg);
    if (_sender.fin_acked() && _receiver.fin_recv()) {
      _active = false;
      // clog << rand_id << ": LAST_ACK ---> CLOSED" << endl;
    }
  } else if (_sender.fin_sent() && _receiver.syn_recv()) {  // FIN_WAIT_1
    ackSeg(seg);
    // clog << rand_id << ": ESTABLISHED ---> FIN_WAIT_1" << endl;
    _receiver.segment_received(seg);
    // if (seg.header().fin) {
    //   if (seg.header().ack)
    //     clog << rand_id << ": FIN_WAIT_1 ---> TIME_WAIT" << endl;
    //   else
    //     clog << rand_id << ": FIN_WAIT_1 ---> CLOSING" << endl;
    // } else if (seg.header().ack) {
    //   if (_sender.fin_acked() && _receiver.syn_recv())
    //     clog << rand_id << ": FIN_WAIT_1 ---> FIN_WAIT_2 with ack: " << seg.header().ackno.raw_value() << endl;
    //   else
    //     clog << rand_id << ": in FIN_WAIT_1: ack previous: " << seg.header().ackno.raw_value() << endl;
    // }
  } else if (_sender.fin_acked() && _receiver.syn_recv()) { // FIN_WAIT_2
    ackSeg(seg);
    _receiver.segment_received(seg);
    // if (_sender.fin_acked() && _receiver.fin_recv())
    //   clog << rand_id << ": FIN_WAIT_2 ---> TIME_WAIT" << endl;
  } else if (_sender.fin_sent() && _receiver.fin_recv()) {  // CLOSING
    ackSeg(seg);
    _receiver.segment_received(seg);
    // if (_sender.fin_acked() && _receiver.fin_recv())
    //   clog << rand_id << ": CLOSING ---> TIME_WAIT" << endl;
  } else if (_sender.fin_acked() && _receiver.fin_recv() && _linger_after_streams_finish) { // TIME_WAIT
    ackSeg(seg);
    _receiver.segment_received(seg);
    _sender.fill_window();
    // clog << rand_id << ": FIN received in TIME_WAIT, retransmit it" << endl;
  } else if (_sender.fin_acked() && _receiver.fin_recv()) { // CLOSED
    return;
  } else {  // ERROR
    sendRST();
  }
  _sender.fill_window();
  if (seg.length_in_sequence_space() > 0)
    _sender.send_empty_segment();
}

bool TCPConnection::active() const {
  return _active;
}

size_t TCPConnection::write(const string &data) {
  auto sz = _sender.stream_in().write(data);
  _sender.fill_window();
  flushSender();
  return sz;
}

//! \param[in] ms_since_last_tick number of milliseconds since the last call to this method
void TCPConnection::tick(const size_t ms_since_last_tick) {
  if (!_active)
    return;
  _time_recv_pack += ms_since_last_tick;
  if (_sender.fin_acked() && _receiver.fin_recv() && _linger_after_streams_finish
      && time_since_last_segment_received() >= _cfg.rt_timeout * 10) {
    _active = false;
    return;
  }
  if (_sender.consecutive_retransmissions() >= TCPConfig::MAX_RETX_ATTEMPTS) {
    sendRST();
    return;
    // TODO: end connection
  }
  _sender.tick(ms_since_last_tick);

  if (_sender.next_seqno_absolute()) {
    _sender.fill_window();
    flushSender();
  }
}

void TCPConnection::end_input_stream() {
  _sender.stream_in().end_input();
  // don't flush in LISTEN state
  if (!(_sender.closed() && _receiver.listen())) {
    _sender.fill_window();
    flushSender();
  }
}

void TCPConnection::connect() {
  _sender.fill_window();  // transfer to SYN_SENT
  // clog << rand_id << ": try: CLOSED ---> SYN_SENT" << endl;
  flushSender();
}

// move _sender.segments_out() to connection's sender
void TCPConnection::flushSender() {
  while (!_sender.segments_out().empty()) {
    _segments_out.push(std::move(_sender.segments_out().front()));
    setAckAndWin(_segments_out.back());
    _sender.segments_out().pop();
  }
}

void TCPConnection::sendRST(bool with_error) {
  // clog << rand_id << ": RST sent !!!" << endl;
  TCPSegment rst_seg;
  rst_seg.header().rst = true;
  setAckAndWin(rst_seg);
  _segments_out.push(std::move(rst_seg));
  if (with_error) {
    _sender.stream_in().set_error();
    _receiver.stream_out().set_error();
    _active = false;
  }
}

void TCPConnection::setAckAndWin(TCPSegment &seg) {
  if (_receiver.ackno().has_value()) {
    seg.header().ack = true;
    seg.header().ackno = _receiver.ackno().value();
  }
  seg.header().win = _receiver.window_size();
}

void TCPConnection::ackSeg(const TCPSegment &seg) {
  if (seg.header().ack)
    _sender.ack_received(seg.header().ackno, seg.header().win);
}

TCPConnection::~TCPConnection() {
  try {
    if (active()) {
      // cerr << "Warning: Unclean shutdown of TCPConnection\n";
      sendRST();
      // Your code here: need to send a RST segment to the peer
    }
  } catch (const exception &e) {
    // std::cerr << "Exception destructing TCP FSM: " << e.what() << std::endl;
  }
}
